#port
server.port=8085

spring.application.name=seckill-stock

#tomcat
server.tomcat.accept-count=6000
server.tomcat.threads.max=800
server.tomcat.threads.min-spare=100
server.tomcat.accesslog.enabled=true
server.tomcat.accesslog.directory=E:/tomcat
server.tomcat.accesslog.pattern=%h %l %u %t "%r" %s %b %D


#Redis
#Redis配置
spring.redis.host=127.0.0.1
#Redis服务器连接端口
spring.redis.port=6379
#Redis服务器连接密码（默认为空）
spring.redis.password=
#Redis数据库
spring.redis.database=0
#连接池最大连接数（使用负值表示没有限制）
spring.redis.lettuce.pool.max-active=8
#连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.lettuce.pool.max-wait=-1ms
#连接池中的最大空闲连接
spring.redis.lettuce.pool.max-idle=8
#连接池中的最小空闲连接
spring.redis.lettuce.pool.min-idle=0
#连接超时时间（毫秒）
spring.redis.timeout=30000
spring.redis.address=redis://127.0.0.1:6379

#single/cluster
redis.arrange.type=single
# redis
distributed.cache.type=redis
# redisson
distributed.lock.type=redisson
# Guava
local.cache.type=guava

#MyBatis
mybatis.mapper-locations=classpath*:mapper/*.xml
mybatis.type-aliases-package=io.binghe.seckill.stock.domain.model.entity

# base nacos
dubbo.registry.address=nacos://127.0.0.1:8848?register-consumer-url=true
dubbo.registry.register-mode=instance
dubbo.protocol.name=dubbo
dubbo.protocol.port=20883
dubbo.application.name=${spring.application.name}
dubbo.scan.base-packages=io.binghe.seckill

#RocketMQ
rocketmq.name-server=127.0.0.1:9876
rocketmq.producer.group=stock-group

#cola/rocketmq/rabbitmq/kafka/activemq/other
message.mq.type=rocketmq

# db/lock/lua/bucket
place.order.type=bucket

#nacos
spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848
spring.cloud.nacos.discovery.enabled=true
spring.cloud.nacos.discovery.namespace=seckill-config
spring.cloud.nacos.discovery.access-key=nacos
spring.cloud.nacos.discovery.secret-key=nacos
spring.cloud.nacos.discovery.group=BINGHE-GROUP

#shardingsphere
spring.shardingsphere.datasource.names=ds0,ds1

#ds0 config
spring.shardingsphere.datasource.ds0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds0.url=jdbc:mysql://localhost:3306/seckill_stock_0?useUnicode=true&characterEncoding=UTF-8&connectTimeout=2000&socketTimeout=5000
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=root

#ds1 config
spring.shardingsphere.datasource.ds1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds1.url=jdbc:mysql://localhost:3306/seckill_stock_1?useUnicode=true&characterEncoding=UTF-8&connectTimeout=2000&socketTimeout=5000
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=root

spring.shardingsphere.sharding.tables.seckill_stock_bucket.database-strategy.inline.sharding-column=goods_id
spring.shardingsphere.sharding.tables.seckill_stock_bucket.database-strategy.inline.algorithm-expression=ds$->{goods_id % 2}
spring.shardingsphere.sharding.tables.seckill_stock_bucket.actualDataNodes=ds${0..1}.seckill_stock_bucket_${0..2}
spring.shardingsphere.sharding.tables.seckill_stock_bucket.tableStrategy.inline.shardingColumn=goods_id
spring.shardingsphere.sharding.tables.seckill_stock_bucket.tableStrategy.inline.algorithm-expression=seckill_stock_bucket_${goods_id % 3}
#spring.shardingsphere.sharding.tables.seckill_stock_bucket.key-generator.column=id
#spring.shardingsphere.sharding.tables.seckill_stock_bucket.key-generator.type=SNOWFLAKE
spring.shardingsphere.props.sql.show= false

