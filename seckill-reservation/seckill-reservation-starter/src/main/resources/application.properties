#port
server.port=8086

#tomcat
server.tomcat.accept-count=6000
server.tomcat.threads.max=800
server.tomcat.threads.min-spare=100
server.tomcat.accesslog.enabled=true
server.tomcat.accesslog.directory=E:/tomcat
server.tomcat.accesslog.pattern=%h %l %u %t "%r" %s %b %D

spring.application.name=seckill-reservation
#Redis
#Redis配置
spring.redis.host=127.0.0.1
#Redis服务器连接端口
spring.redis.port=6379
#Redis服务器连接密码（默认为空）
spring.redis.password=
#Redis数据库
spring.redis.database=0
#连接池最大连接数（使用负值表示没有限制）
spring.redis.lettuce.pool.max-active=8
#连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.lettuce.pool.max-wait=-1ms
#连接池中的最大空闲连接
spring.redis.lettuce.pool.max-idle=8
#连接池中的最小空闲连接
spring.redis.lettuce.pool.min-idle=0
#连接超时时间（毫秒）
spring.redis.timeout=30000
spring.redis.address=redis://127.0.0.1:6379

#single/cluster
redis.arrange.type=single
# redis
distributed.cache.type=redis
# redisson
distributed.lock.type=redisson
# Guava
local.cache.type=guava

#mvc
spring.mvc.static-path-pattern=/images/**
spring.web.resources.static-locations=classpath:/static/images/

#MyBatis
mybatis.mapper-locations=classpath*:mapper/*.xml
mybatis.type-aliases-package=io.binghe.seckill.reservation.domain.model.entity

# base zk
#dubbo.registry.address=zookeeper://127.0.0.1:2181
#dubbo.protocol.name=dubbo
#dubbo.protocol.port=20881
#dubbo.application.name=${spring.application.name}
#dubbo.scan.base-packages=io.binghe.seckill

# base nacos
dubbo.registry.address=nacos://127.0.0.1:8848?register-consumer-url=true
dubbo.registry.register-mode=instance
dubbo.protocol.name=dubbo
dubbo.protocol.port=20886
dubbo.application.name=${spring.application.name}
dubbo.scan.base-packages=io.binghe.seckill

#RocketMQ
rocketmq.name-server=127.0.0.1:9876
rocketmq.producer.group=reservation-group

#cola/rocketmq/rabbitmq/kafka/activemq/other
message.mq.type=rocketmq

##shardingsphere
#spring.shardingsphere.datasource.names=ds0
#
##ds0 config
#spring.shardingsphere.datasource.ds0.type=com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver
#spring.shardingsphere.datasource.ds0.url=jdbc:mysql://localhost:3306/seckill_reservation?useUnicode=true&characterEncoding=UTF-8&connectTimeout=2000&socketTimeout=5000
#spring.shardingsphere.datasource.ds0.username=root
#spring.shardingsphere.datasource.ds0.password=root

#shardingsphere
spring.shardingsphere.datasource.names=ds0,ds1,ds2

#ds0 config
spring.shardingsphere.datasource.ds0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds0.url=jdbc:mysql://localhost:3306/seckill_reservation_0?useUnicode=true&characterEncoding=UTF-8&connectTimeout=2000&socketTimeout=5000
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=root

#ds1 config
spring.shardingsphere.datasource.ds1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds1.url=jdbc:mysql://localhost:3306/seckill_reservation_1?useUnicode=true&characterEncoding=UTF-8&connectTimeout=2000&socketTimeout=5000
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=root

#ds2 config
spring.shardingsphere.datasource.ds2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds2.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds2.url=jdbc:mysql://localhost:3306/seckill_reservation_2?useUnicode=true&characterEncoding=UTF-8&connectTimeout=2000&socketTimeout=5000
spring.shardingsphere.datasource.ds2.username=root
spring.shardingsphere.datasource.ds2.password=root

#seckill_reservation_config
spring.shardingsphere.sharding.tables.seckill_reservation_config.database-strategy.inline.sharding-column=goods_id
spring.shardingsphere.sharding.tables.seckill_reservation_config.database-strategy.inline.algorithm-expression=ds$->{goods_id % 3}
spring.shardingsphere.sharding.tables.seckill_reservation_config.actualDataNodes=ds${0..2}.seckill_reservation_config_${0..2}
spring.shardingsphere.sharding.tables.seckill_reservation_config.tableStrategy.inline.shardingColumn=goods_id
spring.shardingsphere.sharding.tables.seckill_reservation_config.tableStrategy.inline.algorithm-expression=seckill_reservation_config_${goods_id % 3}

#seckill_reservation_goods
spring.shardingsphere.sharding.tables.seckill_reservation_goods.database-strategy.inline.sharding-column=goods_id
spring.shardingsphere.sharding.tables.seckill_reservation_goods.database-strategy.inline.algorithm-expression=ds$->{goods_id % 3}
spring.shardingsphere.sharding.tables.seckill_reservation_goods.actualDataNodes=ds${0..2}.seckill_reservation_goods_${0..2}
spring.shardingsphere.sharding.tables.seckill_reservation_goods.tableStrategy.inline.shardingColumn=goods_id
spring.shardingsphere.sharding.tables.seckill_reservation_goods.tableStrategy.inline.algorithm-expression=seckill_reservation_goods_${goods_id % 3}

#seckill_reservation_user
spring.shardingsphere.sharding.tables.seckill_reservation_user.database-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.tables.seckill_reservation_user.database-strategy.inline.algorithm-expression=ds$->{user_id % 3}
spring.shardingsphere.sharding.tables.seckill_reservation_user.actualDataNodes=ds${0..2}.seckill_reservation_user_${0..2}
spring.shardingsphere.sharding.tables.seckill_reservation_user.tableStrategy.inline.shardingColumn=user_id
spring.shardingsphere.sharding.tables.seckill_reservation_user.tableStrategy.inline.algorithm-expression=seckill_reservation_user_${user_id % 3}

spring.shardingsphere.props.sql.show= false

spring.cloud.nacos.config.server-addr=127.0.0.1:8848
spring.cloud.nacos.config.file-extension=json
spring.cloud.nacos.config.namespace=sentinel-config
spring.cloud.nacos.config.access-key=nacos
spring.cloud.nacos.config.secret-key=nacos
spring.cloud.nacos.config.group=BINGHE-GROUP

spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848
spring.cloud.nacos.discovery.enabled=true
spring.cloud.nacos.discovery.namespace=sentinel-config
spring.cloud.nacos.discovery.access-key=nacos
spring.cloud.nacos.discovery.secret-key=nacos
spring.cloud.nacos.discovery.group=BINGHE-GROUP

#sentinal
# Sentinel 控制台地址
spring.cloud.sentinel.transport.port=9994
spring.cloud.sentinel.transport.dashboard=127.0.0.1:8888
#配置 sentinel.eager=true 时，取消Sentinel控制台懒加载功能
spring.cloud.sentinel.eager=true

spring.cloud.sentinel.datasource.ds1.nacos.server-addr=127.0.0.1:8848
spring.cloud.sentinel.datasource.ds1.nacos.group-id=BINGHE-GROUP
spring.cloud.sentinel.datasource.ds1.nacos.data-id=BINGHE-SENTINEL-FLOW-CONFIGURATION
spring.cloud.sentinel.datasource.ds1.nacos.data-type=json
spring.cloud.sentinel.datasource.ds1.nacos.rule-type=flow
spring.cloud.sentinel.datasource.ds1.nacos.username=nacos
spring.cloud.sentinel.datasource.ds1.nacos.password=nacos
spring.cloud.sentinel.datasource.ds1.nacos.namespace=sentinel-config

spring.cloud.sentinel.datasource.ds2.nacos.server-addr=127.0.0.1:8848
spring.cloud.sentinel.datasource.ds2.nacos.group-id=BINGHE-GROUP
spring.cloud.sentinel.datasource.ds2.nacos.data-id=BINGHE-SENTINEL-DEGRADE-CONFIGURATION
spring.cloud.sentinel.datasource.ds2.nacos.data-type=json
spring.cloud.sentinel.datasource.ds2.nacos.rule-type=degrade
spring.cloud.sentinel.datasource.ds2.nacos.username=nacos
spring.cloud.sentinel.datasource.ds2.nacos.password=nacos
spring.cloud.sentinel.datasource.ds2.nacos.namespace=sentinel-config